version: '3.8'

services:
  encoding-converter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: encoding-converter-pro
    ports:
      - "15000:15000"  # API服务
      - "15001:15001"  # Vue应用
      - "15002:15002"  # 原版HTML
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    volumes:
      # 开发模式下可以挂载代码目录
      # - ./backend:/app/backend
      # - ./frontend:/app/frontend
      # - ./frontend-vue:/app/frontend-vue
      - app_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:15000/api/health && curl -f http://localhost:15001/ && curl -f http://localhost:15002/"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      # API服务
      - "traefik.http.routers.encoding-api.rule=Host(`api.encoding.localhost`)"
      - "traefik.http.services.encoding-api.loadbalancer.server.port=15000"
      # Vue应用
      - "traefik.http.routers.encoding-vue.rule=Host(`vue.encoding.localhost`)"
      - "traefik.http.services.encoding-vue.loadbalancer.server.port=15001"
      # 原版HTML
      - "traefik.http.routers.encoding-html.rule=Host(`html.encoding.localhost`)"
      - "traefik.http.services.encoding-html.loadbalancer.server.port=15002"
    networks:
      - encoding-network

  # 可选：使用Nginx作为反向代理
  nginx:
    image: nginx:alpine
    container_name: encoding-converter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - encoding-converter
    restart: unless-stopped
    networks:
      - encoding-network
    profiles:
      - production

volumes:
  app_data:
    driver: local

networks:
  encoding-network:
    driver: bridge 